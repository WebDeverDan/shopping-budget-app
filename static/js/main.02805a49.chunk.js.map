{"version":3,"sources":["App.js","index.js"],"names":["App","useState","items","setItems","inputBudgetValue","setBudgetValue","inputValue","setInputValue","priceInputValue","setPriceInputValue","totalItemCount","setTotalItemCount","totalPriceCount","setTotalPriceCount","totalItemPrice","setItemTotalPrice","priceColor","setPriceColorClass","budgetMessage","setBudgetMessage","calculateTotal","reduce","total","item","quantity","calculateTotalPrice","forEach","total_price","className","Container","fluid","Form","Group","controlId","Control","type","placeholder","value","onChange","e","target","Card","Label","Button","onClick","newPrice","parseInt","newItem","itemName","price","isSelected","newItems","handleAddButtonClick","map","index","div","icon","faMinus","indexItem","console","log","handleQuantityDecrease","faPlus","handleQuantityIncrease","faTrash","splice","handleRemoveItemButtonClick","window","location","reload","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02805a49.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlus,\n  faMinus,\n  faTrash\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {Container , Card, Form, Button} from 'react-bootstrap'  \n\n\nconst App = () => {\n  const [items, setItems] = useState([]);\n  const [inputBudgetValue, setBudgetValue] = useState(\"\");\n  const [inputValue, setInputValue] = useState(\"\");\n  const [priceInputValue, setPriceInputValue] = useState(\"\");\n  const [totalItemCount, setTotalItemCount] = useState(0);\n  const [totalPriceCount, setTotalPriceCount] = useState(0);\n  const [totalItemPrice, setItemTotalPrice] = useState(0);\n  const [priceColor, setPriceColorClass] = useState(\"regular-price\");\n  const [budgetMessage, setBudgetMessage] = useState(\n    \"preparing to keep you in budget...\"\n  );\n  \n  // add new item\n  const handleAddButtonClick = () => {\n    const newPrice = parseInt(priceInputValue);\n    const newItem = {\n      itemName: inputValue,\n      quantity: 0,\n      price: newPrice,\n      total_price: totalItemPrice,\n      isSelected: false,\n    };\n    const newItems = [...items, newItem];\n    setItems(newItems);\n    setInputValue(\"\");\n    setPriceInputValue(\"\");\n    setItemTotalPrice();\n    calculateTotal();\n    calculateTotalPrice();\n  };\n\n  // increase item quantity\n  const handleQuantityIncrease = (index) => {\n    const newItems = [...items];\n    const indexItem = newItems[index];\n    indexItem.quantity++;\n    indexItem.total_price = indexItem.quantity * indexItem.price;\n    console.log(indexItem.total_price)\n    setItems(newItems);\n    setItemTotalPrice();\n    calculateTotal();\n    calculateTotalPrice();\n  };\n\n  // decrease item quantity\n  const handleQuantityDecrease = (index) => {\n    const newItems = [...items];\n    const indexItem = newItems[index];\n    indexItem.quantity--;\n    indexItem.total_price = indexItem.quantity * indexItem.price;\n    setItems(newItems);\n    setItemTotalPrice();\n    calculateTotal();\n    calculateTotalPrice();\n\t\tconsole.log(newItems)\n  };\n\n  const handleRemoveItemButtonClick = (index) => {\n    items.splice(index, 1)\n    setItemTotalPrice();\n    calculateTotal();\n    calculateTotalPrice();\n  }\n\n  // toggle complete/strikethrough feature \n  const toggleComplete = (index) => {\n    const newItems = [...items];\n    newItems[index].isSelected = !newItems[index].isSelected;\n    setItems(newItems);\n  };\n\n  // calcluates total sum of items\n  const calculateTotal = () => {\n    const totalItemCount = items.reduce((total, item) => {\n      return total + item.quantity;\n    }, 0);\n    setTotalItemCount(totalItemCount);\n  };\n\n  // calculates total sum of prices\n  const calculateTotalPrice = () => {\n    const itemArr = items;\n    let totalPriceCount = 0;\n    itemArr.forEach((total) => {\n      totalPriceCount += total.total_price;\n    });\n    setTotalPriceCount(totalPriceCount);\n    let priceColor = {\n      color: \"green\",\n    };\n    if (totalPriceCount > inputBudgetValue) {\n      priceColor = \"over-budget\";\n    } else {\n      priceColor = \"under-budget\";\n    }\n    setPriceColorClass(priceColor);\n    let budgetMessage;\n    if (totalPriceCount > inputBudgetValue) {\n      budgetMessage = \"OVER BUDGET - ADJUST IT!\";\n    } else {\n      budgetMessage = \"Excellent job staying within your budget!\";\n    }\n    setBudgetMessage(budgetMessage);\n    };\n\n    // reloads the page and clears it all\n    const reloadWindow = () => {\n    window.location.reload();\n    };\n\n\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"app-background\">\n        <h1 className=\"app-title\">Your Shopping List</h1>\n        <div className=\"add-budget-box\">\n          <h1 className=\"instructions\">\n            Start by Setting Your Budget\n          </h1>\n          <Form>\n            <Form.Group\n              className=\"mb-1 add-budget-box\"\n              controlId=\"formEnterBudget\"\n            >\n              <Form.Control\n                className=\"add-budget-input\"\n                type=\"input\"\n                placeholder=\"Type Budget\"\n                value={inputBudgetValue}\n                onChange={(e) => setBudgetValue(e.target.value)}\n              />\n            </Form.Group>\n          </Form>\n        </div>\n\t\t\t\t<h1 className=\"budget-message\">{budgetMessage}</h1>\n        <Card className=\"main-container\">\n          <Form className=\"add-item-form\">\n            <Form.Group className=\"mb-1\" controlId=\"formEnterItem\">\n              <Form.Label className=\"text-dark\">Add an Item to Your List</Form.Label>\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Type Item\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                className=\"add-item-input\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formEnterCost\">\n              <Form.Label className=\"text-dark\">How Much Does it Cost?</Form.Label>\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Cost\"\n                value={priceInputValue}\n                onChange={(e) => setPriceInputValue(e.target.value)}\n                className=\"add-price-input\"\n              />\n            </Form.Group>\n            <Button\n            className=\"button-effects\"\n            onClick={() => handleAddButtonClick()}\n          >Add Item</Button>\n          </Form>\n\t\t\t\t\t<div className=\"totals\">\n          <div className=\"total text-dark\">Items: {totalItemCount}</div>\n          <div className=\"total text-dark\">\n            Total $: <span className={priceColor}>{totalPriceCount}</span>\n          </div>\n          <div className=\"total text-dark\">Budget: {inputBudgetValue}</div>\n        </div>\n\t\t\t\t\t<div className=\"item-list text-dark\">\n          {items.map((item, index) => (\n            <div className=\"item-container\">\n              <div\n                div\n                className=\"item-name\"\n              >\n                <span>{item.itemName}</span>\n              </div>\n              <div>$ {item.price * item.quantity}</div>\n              <div className=\"quantity\">\n                <button>\n                  <FontAwesomeIcon\n                    icon={faMinus}\n                    onClick={() => handleQuantityDecrease(index)}\n                  />\n                </button>\n                <span className=\"quantity-integer\"> {item.quantity} </span>\n                <button>\n                  <FontAwesomeIcon\n                    icon={faPlus}\n                    onClick={() => handleQuantityIncrease(index)}\n                  />\n                </button>\n              </div>\n              <button>\n              <FontAwesomeIcon\n                icon={faTrash}\n                onClick={() => handleRemoveItemButtonClick(index)}\n                  />\n              </button>\n            </div>\n          ))}\n        </div>\n        </Card>\n        <Button\n            className=\"button-effects refresh-title\"\n            onClick={() => reloadWindow()}\n          >Erase Your List\n      </Button>\n      </Container>\n    </div>\n  );\n};  \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}